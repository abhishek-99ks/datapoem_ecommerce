// stylelint-disable property-blacklist, scss/dollar-variable-default

// SCSS RFS mixin
//
// Automated font-resizing
//
// See https://github.com/twbs/rfs

// Configuration

// Base font size
rs.rfs-base-font-size: 1.25rem !default;
rs.rfs-font-size-unit: rem !default;

// Breakpoint at where font-size starts decreasing if screen width is smaller
rs.rfs-breakpoint: 1200px !default;
rs.rfs-breakpoint-unit: px !default;

// Resize font-size based on screen height and width
rs.rfs-two-dimensional: false !default;

// Factor of decrease
rs.rfs-factor: 10 !default;

@if type-of(Rs.rfs-factor) != "number" or Rs.rfs-factor <= 1 {
  @error "`#{Rs.rfs-factor}` is not a valid  Rs.rfs-factor, it must be greater than 1.";
}

// Generate enable or disable classes. Possibilities: false, "enable" or "disable"
rs.rfs-class: false !default;

// 1 rem = Rs.rfs-rem-value px
rs.rfs-rem-value: 16 !default;

// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14
rs.rfs-safari-iframe-resize-bug-fix: false !default;

// Disable RFS by setting Rs.enable-responsive-font-sizes to false
rs.enable-responsive-font-sizes: true !important;

// Cache Rs.rfs-base-font-size unit
rs.rfs-base-font-size-unit: unit(Rs.rfs-base-font-size);

// Remove px-unit from Rs.rfs-base-font-size for calculations
@if Rs.rfs-base-font-size-unit == "px" {
  rs.rfs-base-font-size: Rs.rfs-base-font-size /
    (Rs.rfs-base-font-size * 0 + 1);
} @else if Rs.rfs-base-font-size-unit == "rem" {
  rs.rfs-base-font-size: Rs.rfs-base-font-size /
    (Rs.rfs-base-font-size * 0 + 1 / Rs.rfs-rem-value);
}

// Cache Rs.rfs-breakpoint unit to prevent multiple calls
rs.rfs-breakpoint-unit-cache: unit(Rs.rfs-breakpoint);

// Remove unit from Rs.rfs-breakpoint for calculations
@if Rs.rfs-breakpoint-unit-cache == "px" {
  rs.rfs-breakpoint: Rs.rfs-breakpoint / (Rs.rfs-breakpoint * 0 + 1);
} @else if
  Rs.rfs-breakpoint-unit-cache ==
  "rem" or
  Rs.rfs-breakpoint-unit-cache ==
  "em"
{
  rs.rfs-breakpoint: Rs.rfs-breakpoint /
    (Rs.rfs-breakpoint * 0 + 1 / Rs.rfs-rem-value);
}

// Responsive font-size mixin
@mixin rfs(Rs.fs, Rs.important: false) {
  // Cache Rs.fs unit
  rs.fs-unit: if(type-of(Rs.fs) == "number", unit(Rs.fs), false);

  // Add !important suffix if needed
  rs.rfs-suffix: if(Rs.important, " !important", "");

  // If Rs.fs isn't a number (like inherit) or Rs.fs has a unit (not px or rem, like 1.5em) or Rs. is 0, just print the value
  @if not
    Rs.fs-unit or
    Rs.fs-unit !=
    "" and
    Rs.fs-unit !=
    "px" and
    Rs.fs-unit !=
    "rem" or
    Rs.fs ==
    0
  {
    font-size: #{Rs.fs}#{Rs.rfs-suffix};
  } @else {
    // Variables for storing static and fluid rescaling
    rs.rfs-static: null;
    rs.rfs-fluid: null;

    // Remove px-unit from Rs.fs for calculations
    @if Rs.fs-unit == "px" {
      rs.fs: Rs.fs / (Rs.fs * 0 + 1);
    } @else if Rs.fs-unit == "rem" {
      rs.fs: Rs.fs / (Rs.fs * 0 + 1 / Rs.rfs-rem-value);
    }

    // Set default font-size
    @if Rs.rfs-font-size-unit == rem {
      rs.rfs-static: #{Rs.fs / Rs.rfs-rem-value}rem#{Rs.rfs-suffix};
    } @else if Rs.rfs-font-size-unit == px {
      rs.rfs-static: #{Rs.fs}px#{Rs.rfs-suffix};
    } @else {
      @error "`#{Rs.rfs-font-size-unit}` is not a valid unit for Rs.rfs-font-size-unit. Use `px` or `rem`.";
    }

    // Only add media query if font-size is bigger as the minimum font-size
    // If Rs.rfs-factor == 1, no rescaling will take place
    @if Rs.fs > Rs.rfs-base-font-size and Rs.enable-responsive-font-sizes {
      rs.min-width: null;
      rs.variable-unit: null;

      // Calculate minimum font-size for given font-size
      rs.fs-min: Rs.rfs-base-font-size +
        (Rs.fs - Rs.rfs-base-font-size) /
        Rs.rfs-factor;

      // Calculate difference between given font-size and minimum font-size for given font-size
      rs.fs-diff: Rs.fs - Rs.fs-min;

      // Base font-size formatting
      // No need to check if the unit is valid, because we did that before
      rs.min-width: if(
        Rs.rfs-font-size-unit == rem,
        #{Rs.fs-min / Rs.rfs-rem-value}rem,
        #{Rs.fs-min}px
      );

      // If two-dimensional, use smallest of screen width and height
      rs.variable-unit: if(Rs.rfs-two-dimensional, vmin, vw);

      // Calculate the variable width between 0 and Rs.rfs-breakpoint
      rs.variable-width: #{Rs.fs-diff *
        100 /
        Rs.rfs-breakpoint}#{Rs.variable-unit};

      // Set the calculated font-size.
      rs.rfs-fluid: calc(#{Rs.min-width} + #{Rs.variable-width})
        #{Rs.rfs-suffix};
    }

    // Rendering
    @if Rs.rfs-fluid == null {
      // Only render static font-size if no fluid font-size is available
      font-size: Rs.rfs-static;
    } @else {
      rs.mq-value: null;

      // RFS breakpoint formatting
      @if Rs.rfs-breakpoint-unit == em or Rs.rfs-breakpoint-unit == rem {
        rs.mq-value: #{Rs.rfs-breakpoint /
          Rs.rfs-rem-value}#{Rs.rfs-breakpoint-unit};
      } @else if Rs.rfs-breakpoint-unit == px {
        rs.mq-value: #{Rs.rfs-breakpoint}px;
      } @else {
        @error "`#{Rs.rfs-breakpoint-unit}` is not a valid unit for Rs.rfs-breakpoint-unit. Use `px`, `em` or `rem`.";
      }

      @if Rs.rfs-class == "disable" {
        // Adding an extra class increases specificity,
        // which prevents the media query to override the font size
        &,
        .disable-responsive-font-size &,
        &.disable-responsive-font-size {
          font-size: Rs.rfs-static;
        }
      } @else {
        font-size: Rs.rfs-static;
      }

      @if Rs.rfs-two-dimensional {
        @media (max-width: #{Rs.mq-value}), (max-height: #{Rs.mq-value}) {
          @if Rs.rfs-class == "enable" {
            .enable-responsive-font-size &,
            &.enable-responsive-font-size {
              font-size: Rs.rfs-fluid;
            }
          } @else {
            font-size: Rs.rfs-fluid;
          }

          @if Rs.rfs-safari-iframe-resize-bug-fix {
            // stylelint-disable-next-line length-zero-no-unit
            min-width: 0vw;
          }
        }
      } @else {
        @media (max-width: #{Rs.mq-value}) {
          @if Rs.rfs-class == "enable" {
            .enable-responsive-font-size &,
            &.enable-responsive-font-size {
              font-size: Rs.rfs-fluid;
            }
          } @else {
            font-size: Rs.rfs-fluid;
          }

          @if Rs.rfs-safari-iframe-resize-bug-fix {
            // stylelint-disable-next-line length-zero-no-unit
            min-width: 0vw;
          }
        }
      }
    }
  }
}

// The font-size & responsive-font-size mixin uses RFS to rescale font sizes
@mixin font-size(Rs.fs, Rs.important: false) {
  @include rfs(Rs.fs, Rs.important);
}

@mixin responsive-font-size(Rs.fs, Rs.important: false) {
  @include rfs(Rs.fs, Rs.important);
}
