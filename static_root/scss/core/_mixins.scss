// Mixins
// Bootstrap Mixins
@function breakpoint-next(
  Rs.name,
  Rs.breakpoints: Rs.grid-breakpoints,
  Rs.breakpoint-names: map-keys(Rs.breakpoints)
) {
  rs.n: index(Rs.breakpoint-names, Rs.name);
  @return if(
    Rs.n < length(Rs.breakpoint-names),
    nth(Rs.breakpoint-names, Rs.n + 1),
    null
  );
}

@function breakpoint-min(Rs.name, Rs.breakpoints: Rs.grid-breakpoints) {
  rs.min: map-get(Rs.breakpoints, Rs.name);
  @return if(Rs.min !=0, Rs.min, null);
}

@function breakpoint-max(Rs.name, Rs.breakpoints: Rs.grid-breakpoints) {
  rs.next: breakpoint-next(Rs.name, Rs.breakpoints);
  @return if(Rs.next, breakpoint-min(Rs.next, Rs.breakpoints) - 0.02px, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up(Rs.name, Rs.breakpoints: Rs.grid-breakpoints) {
  rs.min: breakpoint-min(Rs.name, Rs.breakpoints);
  @if Rs.min {
    @media (min-width: Rs.min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down(Rs.name, Rs.breakpoints: Rs.grid-breakpoints) {
  rs.max: breakpoint-max(Rs.name, Rs.breakpoints);
  @if Rs.max {
    @media (max-width: Rs.max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between(
  Rs.lower,
  Rs.upper,
  Rs.breakpoints: Rs.grid-breakpoints
) {
  rs.min: breakpoint-min(Rs.lower, Rs.breakpoints);
  rs.max: breakpoint-max(Rs.upper, Rs.breakpoints);
  @if Rs.min !=null and Rs.max !=null {
    @media (min-width: Rs.min) and (max-width: Rs.max) {
      @content;
    }
  } @else if Rs.max==null {
    @include media-breakpoint-up(Rs.lower, Rs.breakpoints) {
      @content;
    }
  } @else if Rs.min==null {
    @include media-breakpoint-down(Rs.upper, Rs.breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only(Rs.name, Rs.breakpoints: Rs.grid-breakpoints) {
  rs.min: breakpoint-min(Rs.name, Rs.breakpoints);
  rs.max: breakpoint-max(Rs.name, Rs.breakpoints);
  @if Rs.min !=null and Rs.max !=null {
    @media (min-width: Rs.min) and (max-width: Rs.max) {
      @content;
    }
  } @else if Rs.max==null {
    @include media-breakpoint-up(Rs.name, Rs.breakpoints) {
      @content;
    }
  } @else if Rs.min==null {
    @include media-breakpoint-down(Rs.name, Rs.breakpoints) {
      @content;
    }
  }
}

@function breakpoint-infix(Rs.name, Rs.breakpoints: Rs.grid-breakpoints) {
  @return if(breakpoint-min(Rs.name, Rs.breakpoints) ==null, "", "-#{Rs.name}");
}

@mixin hover-focus {
  &:hover,
  &:focus {
    @content;
  }
}

// Background color
@mixin bg-variant(Rs.parent, Rs.color) {
  #{Rs.parent} {
    background-color: Rs.color !important;
  }
  a#{Rs.parent},
  button#{Rs.parent} {
    @include hover-focus {
      background-color: darken(Rs.color, 10%) !important;
    }
  }
}

// Typography
@mixin text-emphasis-variant(Rs.parent, Rs.color) {
  #{Rs.parent} {
    color: Rs.color !important;
  }
  a#{Rs.parent} {
    @include hover-focus {
      color: darken(Rs.color, 10%) !important;
    }
  }
}

// Placeholder
@mixin placeholder {
  &::placeholder {
    @content;
  }
}

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container(Rs.gutter: Rs.grid-gutter-width) {
  width: 100%;
  padding-right: Rs.gutter / 2;
  padding-left: Rs.gutter / 2;
  margin-right: auto;
  margin-left: auto;
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths(
  Rs.max-widths: Rs.container-max-widths,
  Rs.breakpoints: Rs.grid-breakpoints
) {
  @each Rs.breakpoint, Rs.container-max-width in Rs.max-widths {
    @include media-breakpoint-up(Rs.breakpoint, Rs.breakpoints) {
      max-width: Rs.container-max-width;
    }
  }
}

@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-right: (Rs.grid-gutter-width / -2);
  margin-left: (Rs.grid-gutter-width / -2);
}

@mixin make-col-ready() {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  min-height: 1px; // Prevent collapsing
  padding-right: (Rs.grid-gutter-width / 2);
  padding-left: (Rs.grid-gutter-width / 2);
}

@mixin make-col(Rs.size, Rs.columns: Rs.grid-columns) {
  flex: 0 0 percentage(Rs.size / Rs.columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage(Rs.size / Rs.columns);
}

@mixin make-col-offset(Rs.size, Rs.columns: Rs.grid-columns) {
  rs.num: Rs.size / Rs.columns;
  margin-left: if(Rs.num == 0, 0, percentage(Rs.num));
}

@mixin clearfix() {
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}

@mixin float-left {
  float: left !important;
}
@mixin float-right {
  float: right !important;
}
@mixin float-none {
  float: none !important;
}

// CSS image replacement
@mixin text-hide(Rs.ignore-warning: false) {
  // stylelint-disable-next-line font-family-no-missing-generic-family-keyword
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;

  @if (Rs.ignore-warning != true) {
    @warn "The `text-hide()` mixin has been deprecated as of v4.1.0. It will be removed entirely in v5.";
  }
}

// Only display content to screen readers
//
// See: https://a11yproject.com/posts/how-to-hide-content/
// See: https://hugogiraudel.com/2016/10/13/css-hide-and-seek/

@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Use in conjunction with .sr-only to only display content when it's focused.
//
// Useful for "Skip to main content" links; see https://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
//
// Credit: HTML5 Boilerplate

@mixin sr-only-focusable {
  &:active,
  &:focus {
    position: static;
    width: auto;
    height: auto;
    overflow: visible;
    clip: auto;
    white-space: normal;
  }
}

@mixin invisible(Rs.visibility) {
  visibility: Rs.visibility !important;
}

// MDB Mixins
// Set the color of the button and badge
@function set-notification-text-color(Rs.color) {
  @if (lightness(Rs.color) > 80) {
    @return Rs.black-base; // Lighter backgorund, return dark color
  } @else {
    @return Rs.white-base; // Darker background, return light color
  }
}

// Make button
@mixin make-button(Rs.name, Rs.color) {
  .btn-#{Rs.name} {
    background-color: Rs.color !important;
    color: set-notification-text-color(Rs.color);
    &:hover {
      background-color: lighten(Rs.color, 5%);
      color: set-notification-text-color(Rs.color);
    }
    &:focus,
    &.focus {
      box-shadow: Rs.z-depth-1-half;
    }
    &:focus,
    &:active,
    &.active {
      background-color: darken(Rs.color, 20%);
    }
    &.dropdown-toggle {
      background-color: Rs.color !important;
      &:hover,
      &:focus {
        background-color: lighten(Rs.color, 5%) !important;
      }
    }
    &:not([disabled]):not(.disabled):active,
    &:not([disabled]):not(.disabled).active,
    .show > &.dropdown-toggle {
      box-shadow: Rs.z-depth-1-half;
      background-color: darken(Rs.color, 20%) !important;
    }
    &:not([disabled]):not(.disabled):active:focus,
    &:not([disabled]):not(.disabled).active:focus,
    .show > &.dropdown-toggle:focus {
      box-shadow: Rs.z-depth-1-half;
    }
  }
  .#{Rs.name}-ic {
    color: Rs.color !important;
    &:hover,
    &:focus {
      color: Rs.color;
    }
  }
  a.btn:not([href]):not([tabindex]),
  a.btn:not([href]):not([tabindex]):focus,
  a.btn:not([href]):not([tabindex]):hover {
    color: set-notification-text-color(Rs.color);
  }
}

// Make outline button
@mixin make-outline-button(Rs.name, Rs.color) {
  .btn-outline-#{Rs.name} {
    border: 2px solid Rs.color !important;
    background-color: transparent !important;
    color: Rs.color !important;
    &:hover,
    &:focus,
    &:active,
    &:active:focus,
    &.active {
      border-color: Rs.color !important;
      background-color: transparent !important;
      color: Rs.color !important;
    }
    &:not([disabled]):not(.disabled):active,
    &:not([disabled]):not(.disabled).active,
    .show > &.dropdown-toggle {
      box-shadow: Rs.z-depth-1-half;
      background-color: transparent !important;
      border-color: Rs.color !important;
    }
    &:not([disabled]):not(.disabled):active:focus,
    &:not([disabled]):not(.disabled).active:focus,
    .show > &.dropdown-toggle:focus {
      box-shadow: Rs.z-depth-1-half;
    }
  }
}
// Make gradient
@mixin make-gradient(Rs.name, Rs.value) {
  .#{Rs.name}-gradient {
    background: linear-gradient(
      40deg,
      map-get(Rs.value, start),
      map-get(Rs.value, end)
    ) !important;
  }
}

rs.opacity: 0.9;
// Make gradient
@mixin make-gradient-rgba(Rs.name, Rs.value) {
  .#{Rs.name}-gradient-rgba {
    background: linear-gradient(
      40deg,
      map-get(Rs.value, start),
      map-get(Rs.value, end)
    ) !important;
  }
}

// Make gradient button
@mixin make-gradient-button(Rs.name, Rs.value) {
  .btn {
    &.#{Rs.name}-gradient {
      transition: 0.5s ease;
      color: Rs.white-base;
      &:hover,
      &:focus,
      &:active,
      &:active:focus &.active {
        background: linear-gradient(
          lighten(map-get(Rs.value, start), 5%),
          lighten(map-get(Rs.value, end), 5%)
        );
      }
    }
  }
}

// Button size
@mixin button-size(Rs.padding-y, Rs.padding-x, Rs.font-size) {
  padding: Rs.padding-y Rs.padding-x;
  font-size: Rs.font-size;
}

@mixin make-badge(Rs.name, Rs.color) {
  .badge-#{Rs.name} {
    background-color: Rs.color !important;
    color: set-notification-text-color(Rs.color) !important;
  }
}

// Make input
@mixin make-input(
  Rs.margin-bottom,
  Rs.label-font-size,
  Rs.label-active-font-size,
  Rs.top,
  Rs.prefix-font-size,
  Rs.margin-left,
  Rs.width,
  Rs.margin-left-2
) {
  .validate {
    margin-bottom: Rs.margin-bottom;
  }
  label {
    font-size: Rs.label-font-size;
    &.active {
      font-size: Rs.label-active-font-size;
    }
  }
  .prefix {
    top: Rs.top;
    font-size: Rs.prefix-font-size;
    ~ input,
    ~ textarea {
      margin-left: Rs.margin-left;
      width: Rs.width;
    }
    ~ label {
      margin-left: Rs.margin-left;
    }
    ~ .form-text {
      margin-left: Rs.margin-left-2;
    }
  }
}

// Make navbar
@mixin make-navbar(
  Rs.color-0,
  Rs.background-image,
  Rs.color,
  Rs.color-2,
  Rs.color-3
) {
  .navbar-nav {
    .nav-item {
      .nav-link {
        &.disbled {
          color: Rs.color-0;
          &:hover {
            color: Rs.color-0;
          }
        }
      }
    }
  }
  .navbar-toggler-icon {
    background-image: Rs.background-image;
    cursor: pointer;
  }
  .breadcrumb,
  .navbar-nav {
    .nav-item {
      .nav-link {
        color: Rs.color;
        transition: Rs.navbar-nav-transition;
        &:hover {
          color: Rs.color-2;
        }
      }
      &.active > .nav-link {
        background-color: Rs.color-3;
        &:hover {
          color: Rs.color;
        }
      }
    }
  }
  .navbar-toggler {
    color: Rs.color;
  }
  form {
    .md-form {
      input {
        border-bottom: 1px solid Rs.color;
        &:focus:not([readonly]) {
          border-color: Rs.input-md-focus-color;
        }
      }
      .form-control {
        color: Rs.color;
        @include placeholder {
          color: Rs.color;
          font-weight: Rs.navbar-font-weight;
        }
      }
    }
  }
}

// Make floating button
@mixin make-btn-floating(Rs.width, Rs.height, Rs.font-size, Rs.line-height) {
  width: Rs.width;
  height: Rs.height;
  i {
    font-size: Rs.font-size;
    line-height: Rs.line-height;
  }
}

// Keyframes
@mixin keyframes(Rs.animation-name) {
  @keyframes #{Rs.animation-name} {
    @content;
  }
}

// Scroll bar and scroll spy width and height
@mixin scroll-width(Rs.scrollbar-width) {
  width: Rs.scrollbar-width;
}

@mixin scroll-height(Rs.scrollbar-height) {
  height: Rs.scrollbar-height;
}

// Scroll spy font-weight
@mixin scrollspy-font-weight(Rs.scrollspy-font-weight) {
  font-weight: Rs.scrollspy-font-weight;
}

// Switch width and height
@mixin switch-width-height(Rs.switchWidth, Rs.switchHeight) {
  width: Rs.switchWidth;
  height: Rs.switchHeight;
}

// Make Box-shadows
@mixin box-shadows(Rs.shadow...) {
  box-shadow: Rs.shadow;
}

// Make Transition
@mixin transition-main(Rs.transition...) {
  transition: Rs.transition;
}

// Make border-radius scrollspy
@mixin scrollspy-border-radius(Rs.scrollspy-radius) {
  border-radius: Rs.scrollspy-radius;
}

// Make border-radius scrollspy 4rows
@mixin scrollspy-border-radius-4rows(
  Rs.top-left,
  Rs.top-right,
  Rs.bottom-right,
  Rs.bottom-left
) {
  border-radius: Rs.top-left Rs.top-right Rs.bottom-right Rs.bottom-left;
}

//Make animation for progresss
@mixin progress-animation-default(Rs.animation...) {
  animation: Rs.animation;
}
//Make transform
@mixin transform(Rs.transform...) {
  transform: Rs.transform;
}
